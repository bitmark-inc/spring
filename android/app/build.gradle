apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply from: 'versioning.gradle'

apply from: '../autodimension.gradle'

apply plugin: 'io.fabric'

apply plugin: 'io.sentry.android.gradle'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.bitmark.synergy"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode buildVersionCode()
        versionName buildVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }

    splits {
        abi {
            reset()
            enable project.hasProperty('splitApks')
            universalApk false // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    bundle {
        density {
            // Different APKs are generated for devices with different screen densities; true by default.
            enableSplit false
        }
        abi {
            // Different APKs are generated for devices with different CPU architectures; true by default.
            enableSplit true
        }
        language {
            // This is disabled so that the App Bundle does NOT split the APK for each language.
            // We're gonna use the same APK for all languages.
            enableSplit false
        }
    }

    androidExtensions {
        experimental = true
    }

    signingConfigs {

        debug {
            def keystorePropertiesFile = rootProject.file(
                    "keystores/debug.properties")
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            keyAlias keystoreProperties['key.alias']
            keyPassword keystoreProperties['key.alias.password']
            storeFile file('../keystores/debug.keystore')
            storePassword keystoreProperties['key.store.password']
        }

        release {
            def keystorePropertiesFile = rootProject.file(
                    "keystores/release.properties")
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            keyAlias keystoreProperties['key.alias']
            keyPassword keystoreProperties['key.alias.password']
            storeFile file('../keystores/release.keystore')
            storePassword keystoreProperties['key.store.password']
        }
    }

    buildTypes {

        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"),
                    "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    flavorDimensions "version"

    productFlavors {

        inhouse {
            dimension "version"
            applicationIdSuffix ".inhouse"
            resValue "string", "app_name", "Synergy"
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_dev",
                    appIconRound: "@mipmap/ic_launcher_dev_round"
            ]
            ext.betaDistributionReleaseNotesFilePath =
                    "${project.rootDir}/distribution/release_note.txt"
            ext.betaDistributionEmailsFilePath =
                    "${project.rootDir}/distribution/testers.txt"

        }

        prd {
            dimension "version"
            resValue "string", "app_name", "Synergy"
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher",
                    appIconRound: "@mipmap/ic_launcher_round"
            ]
            ext.betaDistributionReleaseNotesFilePath =
                    "${project.rootDir}/distribution/release_note.txt"
            ext.betaDistributionEmailsFilePath =
                    "${project.rootDir}/distribution/testers.txt"

        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'lib/libsodiumjni.dylib'
        exclude 'lib/libsodiumjni.so'
    }

    sentry {
        // Disables or enables the automatic configuration of proguard
        // for Sentry.  This injects a default config for proguard so
        // you don't need to do it manually.
        autoProguardConfig true

        // Enables or disables the automatic upload of mapping files
        // during a build.  If you disable this you'll need to manually
        // upload the mapping files with sentry-cli when you do a release.
        autoUpload true
    }
}

dependencies {
    // Basic
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'androidx.appcompat:appcompat:1.1.0'

    implementation 'androidx.core:core-ktx:1.2.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.recyclerview:recyclerview:1.0.0"

    // Dagger
    implementation 'com.google.dagger:dagger-android:2.25.2'
    implementation 'com.google.dagger:dagger-android-support:2.25.2'
    kapt 'com.google.dagger:dagger-android-processor:2.25.2'
    kapt 'com.google.dagger:dagger-compiler:2.25.2'

    // Rx2
    implementation 'io.reactivex.rxjava2:rxjava:2.2.10'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // Retrofit + Okhttp
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'
    implementation 'com.squareup.okhttp3:okhttp:4.2.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.2'

    // Architecture component
    implementation "android.arch.lifecycle:livedata:2.0.0"
    implementation "android.arch.lifecycle:runtime:2.0.0"
    kapt "android.arch.lifecycle:compiler:2.0.0"

    // Room
    implementation 'androidx.room:room-runtime:2.2.1'
    kapt 'androidx.room:room-compiler:2.2.1'
    implementation 'androidx.room:room-rxjava2:2.2.1'

    // Other
    implementation 'com.bitmark.sdk:android-sdk:2.1.0'
    implementation 'com.bitmark.sdk:api-service:2.1.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }
    implementation 'io.sentry:sentry-android:1.7.28'
    implementation 'org.slf4j:slf4j-nop:1.7.28'
    implementation 'com.google.firebase:firebase-messaging:20.0.0'

    // Testing
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.3.0-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha02'
}

task fillSecretKey {
    doLast {
        def keyPropertiesFile = rootProject.file('key.properties')
        def keyProperties = new Properties()
        keyProperties.load(new FileInputStream(keyPropertiesFile))
        def apiKeyFile = file('src/main/jni/api-key.cpp')
        def content = apiKeyFile.getText()
        content = content.replace('bitmark-api-key-to-be-filled', keyProperties['api.key.bitmark'])
        apiKeyFile.bytes = []
        apiKeyFile.text = content
    }
}

apply plugin: 'com.google.gms.google-services'
