// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: insight.proto

package protomodel

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Insight struct {
	SectionName          string   `protobuf:"bytes,1,opt,name=sectionName,json=section_name,proto3" json:"section_name"`
	DiffFromPrevious     float64  `protobuf:"fixed64,2,opt,name=diffFromPrevious,json=diff_from_previous,proto3" json:"diff_from_previous"`
	Period               string   `protobuf:"bytes,3,opt,name=period,proto3" json:"period"`
	PeriodStartedAt      int64    `protobuf:"varint,4,opt,name=periodStartedAt,json=period_started_at,proto3" json:"period_started_at"`
	Quantity             int32    `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity"`
	Value                float64  `protobuf:"fixed64,6,opt,name=value,proto3" json:"value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Insight) Reset()         { *m = Insight{} }
func (m *Insight) String() string { return proto.CompactTextString(m) }
func (*Insight) ProtoMessage()    {}
func (*Insight) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f26ddb8102ea1e1, []int{0}
}
func (m *Insight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Insight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Insight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Insight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Insight.Merge(m, src)
}
func (m *Insight) XXX_Size() int {
	return m.Size()
}
func (m *Insight) XXX_DiscardUnknown() {
	xxx_messageInfo_Insight.DiscardUnknown(m)
}

var xxx_messageInfo_Insight proto.InternalMessageInfo

func (m *Insight) GetSectionName() string {
	if m != nil {
		return m.SectionName
	}
	return ""
}

func (m *Insight) GetDiffFromPrevious() float64 {
	if m != nil {
		return m.DiffFromPrevious
	}
	return 0
}

func (m *Insight) GetPeriod() string {
	if m != nil {
		return m.Period
	}
	return ""
}

func (m *Insight) GetPeriodStartedAt() int64 {
	if m != nil {
		return m.PeriodStartedAt
	}
	return 0
}

func (m *Insight) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Insight) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type InsightResponse struct {
	Result               []*Insight `protobuf:"bytes,1,rep,name=result,proto3" json:"result"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *InsightResponse) Reset()         { *m = InsightResponse{} }
func (m *InsightResponse) String() string { return proto.CompactTextString(m) }
func (*InsightResponse) ProtoMessage()    {}
func (*InsightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f26ddb8102ea1e1, []int{1}
}
func (m *InsightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InsightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InsightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InsightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsightResponse.Merge(m, src)
}
func (m *InsightResponse) XXX_Size() int {
	return m.Size()
}
func (m *InsightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InsightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InsightResponse proto.InternalMessageInfo

func (m *InsightResponse) GetResult() []*Insight {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*Insight)(nil), "Insight")
	proto.RegisterType((*InsightResponse)(nil), "InsightResponse")
}

func init() { proto.RegisterFile("insight.proto", fileDescriptor_7f26ddb8102ea1e1) }

var fileDescriptor_7f26ddb8102ea1e1 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xd1, 0x4a, 0xf3, 0x30,
	0x1c, 0xc5, 0xbf, 0x6c, 0xdf, 0xea, 0x96, 0x4d, 0x36, 0x03, 0x4a, 0xf0, 0xa2, 0x29, 0xbb, 0xea,
	0x85, 0x6e, 0xe0, 0x1e, 0x40, 0x56, 0x44, 0xf0, 0x46, 0x24, 0x3e, 0x40, 0xe9, 0xb6, 0xb4, 0x0b,
	0xac, 0x4d, 0x4d, 0xd2, 0x81, 0x6f, 0xe2, 0x93, 0xf8, 0x0c, 0x5e, 0xfa, 0x04, 0x45, 0xea, 0x5d,
	0x9f, 0x42, 0x4c, 0xc2, 0x40, 0xf4, 0xea, 0x9c, 0xf3, 0x3b, 0x7f, 0x12, 0xfe, 0x09, 0x3c, 0xe6,
	0x85, 0xe2, 0xd9, 0x56, 0xcf, 0x4a, 0x29, 0xb4, 0x38, 0xbf, 0xcc, 0xb8, 0xde, 0x56, 0xab, 0xd9,
	0x5a, 0xe4, 0xf3, 0x4c, 0x64, 0x62, 0x6e, 0xf0, 0xaa, 0x4a, 0x4d, 0x32, 0xc1, 0x38, 0x3b, 0x3e,
	0x7d, 0xed, 0xc0, 0xa3, 0x3b, 0x7b, 0x00, 0x5a, 0xc0, 0xa1, 0x62, 0x6b, 0xcd, 0x45, 0x71, 0x9f,
	0xe4, 0x0c, 0x83, 0x00, 0x84, 0x83, 0x68, 0xd2, 0xd6, 0x64, 0xe4, 0x70, 0x5c, 0x24, 0x39, 0xa3,
	0x3f, 0x12, 0xba, 0x81, 0x93, 0x0d, 0x4f, 0xd3, 0x5b, 0x29, 0xf2, 0x07, 0xc9, 0xf6, 0x5c, 0x54,
	0x0a, 0x77, 0x02, 0x10, 0x82, 0xe8, 0xac, 0xad, 0x09, 0xfa, 0xee, 0xe2, 0x54, 0x8a, 0x3c, 0x2e,
	0x5d, 0x4b, 0xff, 0x60, 0x68, 0x0a, 0xbd, 0x92, 0x49, 0x2e, 0x36, 0xb8, 0x6b, 0x6e, 0x85, 0x6d,
	0x4d, 0x1c, 0xa1, 0x4e, 0xd1, 0x12, 0x8e, 0xad, 0x7b, 0xd4, 0x89, 0xd4, 0x6c, 0xb3, 0xd4, 0xf8,
	0x7f, 0x00, 0xc2, 0x6e, 0x74, 0xda, 0xd6, 0xe4, 0xc4, 0x56, 0xb1, 0xb2, 0x5d, 0x9c, 0x68, 0xfa,
	0x1b, 0xa1, 0x10, 0xf6, 0x9f, 0xaa, 0xa4, 0xd0, 0x5c, 0x3f, 0xe3, 0x5e, 0x00, 0xc2, 0x5e, 0x34,
	0x6a, 0x6b, 0x72, 0x60, 0xf4, 0xe0, 0x10, 0x81, 0xbd, 0x7d, 0xb2, 0xab, 0x18, 0xf6, 0xcc, 0x2e,
	0x83, 0xb6, 0x26, 0x16, 0x50, 0x2b, 0xd3, 0x6b, 0x38, 0x76, 0xef, 0x46, 0x99, 0x2a, 0x45, 0xa1,
	0x18, 0xba, 0x80, 0x9e, 0x64, 0xaa, 0xda, 0x69, 0x0c, 0x82, 0x6e, 0x38, 0xbc, 0xea, 0xcf, 0xdc,
	0x84, 0x5d, 0xc7, 0x76, 0xd4, 0x69, 0x34, 0x79, 0x6b, 0x7c, 0xf0, 0xde, 0xf8, 0xe0, 0xa3, 0xf1,
	0xc1, 0xcb, 0xa7, 0xff, 0x6f, 0xe5, 0x99, 0x2f, 0x59, 0x7c, 0x05, 0x00, 0x00, 0xff, 0xff, 0xd9,
	0x63, 0x0f, 0xd6, 0xd2, 0x01, 0x00, 0x00,
}

func (m *Insight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Insight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Insight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x31
	}
	if m.Quantity != 0 {
		i = encodeVarintInsight(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x28
	}
	if m.PeriodStartedAt != 0 {
		i = encodeVarintInsight(dAtA, i, uint64(m.PeriodStartedAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Period) > 0 {
		i -= len(m.Period)
		copy(dAtA[i:], m.Period)
		i = encodeVarintInsight(dAtA, i, uint64(len(m.Period)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DiffFromPrevious != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DiffFromPrevious))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.SectionName) > 0 {
		i -= len(m.SectionName)
		copy(dAtA[i:], m.SectionName)
		i = encodeVarintInsight(dAtA, i, uint64(len(m.SectionName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InsightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Result[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInsight(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintInsight(dAtA []byte, offset int, v uint64) int {
	offset -= sovInsight(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Insight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SectionName)
	if l > 0 {
		n += 1 + l + sovInsight(uint64(l))
	}
	if m.DiffFromPrevious != 0 {
		n += 9
	}
	l = len(m.Period)
	if l > 0 {
		n += 1 + l + sovInsight(uint64(l))
	}
	if m.PeriodStartedAt != 0 {
		n += 1 + sovInsight(uint64(m.PeriodStartedAt))
	}
	if m.Quantity != 0 {
		n += 1 + sovInsight(uint64(m.Quantity))
	}
	if m.Value != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InsightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, e := range m.Result {
			l = e.Size()
			n += 1 + l + sovInsight(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInsight(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInsight(x uint64) (n int) {
	return sovInsight(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Insight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInsight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Insight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Insight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInsight
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiffFromPrevious", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DiffFromPrevious = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInsight
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Period = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodStartedAt", wireType)
			}
			m.PeriodStartedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodStartedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipInsight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInsight
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInsight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInsight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInsight
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, &Insight{})
			if err := m.Result[len(m.Result)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInsight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInsight
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInsight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInsight(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInsight
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInsight
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInsight
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInsight
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInsight
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInsight
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInsight        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInsight          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInsight = fmt.Errorf("proto: unexpected end of group")
)
